# Beschreibt wie unsere CI/CD Pipeline mit der Gitlab-CI funktioniert
#
# Referenz: https://docs.gitlab.com/ce/ci/yaml/

image: emundo/docker-compose-openjdk-node-gradle:latest

include:
  local: gitlab-ci/kube-deploy.gitlab-ci.yaml

stages:
    - lint-and-compile
    - review
    - cleanup
    - build
    - deploy
    - dist

cache:
    paths:
        - /home/emundo/.npm

before_script:
    - npm ci

lint:
    image: node
    stage: lint-and-compile
    script:
        - npm run lint # npm run lint

compile:
    image: node
    stage: lint-and-compile
    script:
        -  npm run build
    artifacts:
        name: "$CI_PROJECT_PATH_SLUG-$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
        when: on_success
        paths:
            - dist/htdocs/
        expire_in: 1 week # Wir brauchen das Aritfakt nur bis zum Ende der Pipeline

docker-container:
    stage: build
    services:
      - docker:dind
    variables:
      DOCKER_DRIVER: overlay
      DOCKER_HOST: tcp://localhost:2375
    cache:
        # nur Pullen, wir wollen die gelöschen dev-Dependencies nicht aus dem Cache löschen
        policy: pull
    script:
        - npm run build --prod --aot --minifyjs --minifycss --optimizejs
        # Tag with commit tag or latest if not aviable.
        - "[[ -z $CI_COMMIT_TAG ]] && CI_COMMIT_TAG=$CI_COMMIT_REF_SLUG"
        - "[[ $CI_COMMIT_REF_NAME -eq 'master' ]] && CI_COMMIT_TAG=latest"
        - "export CI_COMMIT_TAG"

        # Führe Login durch, da ggf. Images aus unserer Registry benötigt werden
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

        # Baue einzelne Docker Images
        - docker build --pull --tag "$CI_REGISTRY_IMAGE/client:$CI_COMMIT_TAG" .

        # Führe nochmal ein Login durch, falls ein Build länger dauert
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

        # Pushe Images in Registry
        - docker push "$CI_REGISTRY_IMAGE/client"
