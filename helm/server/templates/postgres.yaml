apiVersion: v1
kind: Service
metadata:
  name: {{.Values.postgres.hostname}}
  labels:
    app: {{.Values.application.name}}
    environment: {{.Values.application.environment}}
spec:
  ports:
    - port: 5432
  selector:
    app: {{.Values.application.name}}-postgres
  clusterIP: None
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-password
  labels:
    app: {{.Values.application.name}}
    environment: {{.Values.application.environment}}
type: Opaque
stringData:
  password: {{.Values.postgres.password}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Values.application.name}}-postgres
  labels:
    app: {{.Values.application.name}}
    environment: {{.Values.application.environment}}
spec:
  serviceName: {{.Values.postgres.hostname}}
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{.Values.application.name}}-postgres
  template:
    metadata:
      labels:
        app: {{.Values.application.name}}-postgres
    spec:
      imagePullSecrets:
        - name: {{ .Values.dockerRegistrySecretName }}
      securityContext:
        fsGroup: {{.Values.postgres.postgresUID}}
      initContainers:
        - name: init-chmod-data
          image: docker.io/bitnami/minideb:latest
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          command:
            - sh
            - -c
            - |
              mkdir -p /schreib/postgresql/data
              chmod 700 /schreib/postgresql/data
              find /schreib/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" | \
                xargs chown -R {{.Values.postgres.postgresUID}}:{{.Values.postgres.postgresUID}}
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: data
              mountPath: /schreib/postgresql
      containers:
        - image: {{ .Values.postgres.image }}
          name: {{.Values.application.name}}-postgres
          imagePullPolicy: "Always"
          resources:
            requests:
              cpu: 250m
              memory: 768Mi
          securityContext:
            runAsUser: {{.Values.postgres.postgresUID}}
          env:
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: PGDATA
              value: "/schreib/postgresql/data"
            - name: POSTGRES_DB
              value: {{.Values.postgres.database}}
            - name: POSTGRES_USER
              value: {{.Values.postgres.user}}
            - name: TZ
              value: CET
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: postgres-password
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready -U "{{ .Values.postgres.user}}" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  pg_isready -U "{{ .Values.postgres.user}}" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /schreib/postgresql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: {{ .Values.postgres.storageType | default "standard" }}
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.postgres.volumeSize }}



